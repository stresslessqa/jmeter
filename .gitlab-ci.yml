include:
  - project: shared/ci
    ref: release/1.0
    file:
      - image/kaniko.yaml

stages:
  - image
  - verify
  - test
  - analyze

variables:
  TEST_NOTES:
    description: "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ (JIRA ID, –æ–ø–∏—Å–∞–Ω–∏–µ)"
    value: ""    
  SERVICE_TO_TEST:
    description: "–°–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    options:
      - "dummy"
      - "service_a"
      - "service_b"
      
    value: "dummy"
  TEST_TYPE:
    description: "–¢–∏–ø —Ç–µ—Å—Ç–∞: stability | load | max | JIRA-ID"
    value: "dummy"

  IMAGE_TAG: "${CI_REGISTRY_IMAGE}/app:${CI_COMMIT_REF_NAME}"
  JMETER_HEAP: "-Xms6g -Xmx10g"
  JVM_ARGS: "-XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:G1ReservePercent=20 -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -Djavax.net.ssl.trustStore=/jmeter/truststore.jks -Djavax.net.ssl.trustStorePassword=changeit"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
verify_image:
  stage: verify
  image: "${IMAGE_TAG}"
  script:
    - echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ JMeter –æ–±—Ä–∞–∑–∞..."
    - jmeter -v
    - echo "üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    - ls -la /jmeter/tests/
    - ls -la /jmeter/conf/
    - ls -la /jmeter/utils/
    - echo "‚úÖ –û–±—Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
  allow_failure: false

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
test:
  stage: test
  tags:
    - loadtest
  image: "${IMAGE_TAG}"
  needs: ["verify_image"]
  variables:
    RESULTS_DIR: "results/${SERVICE_TO_TEST}/${TEST_TYPE}"
    JTL_FILE: "${RESULTS_DIR}/results.jtl"
    LOG_FILE: "${RESULTS_DIR}/jmeter.log"
    HTML_DIR: "${RESULTS_DIR}/html"
    NOTES: "${RESULTS_DIR}/notes.md"
    TEST_START_TIME: ${CI_JOB_STARTED_AT}
  before_script:
    - export RUNNER_NAME=$(hostname)
    - echo "=== –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É ==="
    - echo "üìä üëÅÔ∏è https://grafana.test.com/d/6581e46eb23/kubernetes-compute-resources-pod?orgId=1&from=now-1h&to=now&timezone=UTC&var-datasource=F997E84B62F&var-cluster=com-test-c1-es-02&var-namespace=gitlab-runners&var-pod=${RUNNER_NAME}"
  script:
    - echo "=== –ó–∞–ø—É—Å–∫ JMeter ==="
    - echo "üìå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ ${SERVICE_TO_TEST}"
    - echo "üìå –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç ${TEST_TYPE}"
    - echo "üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ${TEST_NOTES}"
    - echo "üìå –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ ${TEST_START_TIME}"

    - |
      TEST_PLAN="tests/${SERVICE_TO_TEST}/${TEST_TYPE}.jmx"
      if [ ! -f "$TEST_PLAN" ]; then
        echo "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ—Å—Ç-–ø–ª–∞–Ω $TEST_PLAN"
        echo "üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç-–ø–ª–∞–Ω—ã:"
        find tests -name "*.jmx" -type f 2>/dev/null || echo "–ù–µ—Ç .jmx —Ñ–∞–π–ª–æ–≤"
        exit 1
      fi
      echo "‚úÖ –¢–µ—Å—Ç-–ø–ª–∞–Ω: $TEST_PLAN –Ω–∞–π–¥–µ–Ω"
    
    - mkdir -p "${RESULTS_DIR}"
    
    - |
      # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã —Å–≤–æ–π—Å—Ç–≤
      if [ -f "conf/global.properties" ]; then
        PROPS="-q conf/global.properties"
        echo "‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤"
      else
        PROPS=""
        echo "‚ö†Ô∏è –§–∞–π–ª –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
      fi
      
      # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
      if [ -f "conf/files.properties" ]; then
        PROPS="${PROPS} -q conf/files.properties"
        echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω —Ñ–∞–π–ª –ø—É—Ç–µ–π –∫ –¥–∞–Ω–Ω—ã–º"
      else
        echo "‚ö†Ô∏è –§–∞–π–ª –ø—É—Ç–µ–π –∫ –¥–∞–Ω–Ω—ã–º –Ω–µ –Ω–∞–π–¥–µ–Ω"
      fi

      echo "üîß –ò—Ç–æ–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã properties: ${PROPS}"

    - |
      # JMeter properties
      JPROPS="-Jproject.name=${SERVICE_TO_TEST}"
      JPROPS="$JPROPS -Jtest.name=${TEST_TYPE}"
      JPROPS="$JPROPS -Jtest.ci_pipeline_id=${CI_PIPELINE_ID}"
      JPROPS="$JPROPS -Jtest.ci_job_id=${CI_JOB_ID}"
      JPROPS="$JPROPS -Jtest.start_time=${TEST_START_TIME}"
    
    - |
      # –≠–∫—Å–ø–æ—Ä—Ç JVM –Ω–∞—Å—Ç—Ä–æ–µ–∫
      export HEAP="${JMETER_HEAP}"
      export JVM_ARGS="${JVM_ARGS}"
      
      echo "üöÄ –ó–∞–ø—É—Å–∫ JMeter..."
      echo "–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞: jmeter -n -t $TEST_PLAN $PROPS $JPROPS -l ${JTL_FILE} -j ${LOG_FILE} -e -o ${HTML_DIR}"
      
      # –ó–∞–ø—É—Å–∫ JMeter –≤ foreground
      set -o pipefail
      jmeter -n -t "$TEST_PLAN" $PROPS $JPROPS \
        -l "${JTL_FILE}" \
        -j "${LOG_FILE}" \
        -e -o "${HTML_DIR}" | tee "${RESULTS_DIR}/console.log"
      
      TEST_EXIT_CODE=$?
      if [ $TEST_EXIT_CODE -eq 0 ]; then
        echo "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ"
      else
        echo "‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ $TEST_EXIT_CODE)"
        exit $TEST_EXIT_CODE
      fi
    
    - |
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if [ -f "${JTL_FILE}" ]; then
        RECORDS=$(wc -l < ${JTL_FILE})
        echo "üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω JTL: ${JTL_FILE} ($RECORDS —Å—Ç—Ä–æ–∫)"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        if [ $RECORDS -lt 10 ]; then
          echo "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω–µ–µ 10 –∑–∞–ø–∏—Å–µ–π!"
        fi
      else
        echo "‚ùå JTL —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω!"
        exit 1
      fi
      
      if [ -d "${HTML_DIR}" ]; then
        echo "üìà –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω HTML –æ—Ç—á—ë—Ç: ${HTML_DIR}/"
      else
        echo "‚ö†Ô∏è  HTML –æ—Ç—á—ë—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω"
      fi
      
      echo $TEST_NOTES > ${NOTES}
  
  artifacts:
    when: always
    expire_in: 14 days
    paths:
      - ${RESULTS_DIR}/

# –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
analyze:
  stage: analyze
  image: company.test.com/docker/python:3.12-slim
  needs: ["test"]
  variables:
    RESULTS_DIR: "results/${SERVICE_TO_TEST}/${TEST_TYPE}"
    JTL_FILE: "${RESULTS_DIR}/results.jtl"
  before_script:
    - python -m pip install --upgrade pip
    - python -m pip install pandas
  script:
    - echo "üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞..."
    - |
      if [ ! -f "${JTL_FILE}" ]; then
        echo "‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${JTL_FILE}"
        exit 1
      fi
      
      echo "üìä –ù–∞–π–¥–µ–Ω JTL —Ñ–∞–π–ª: ${JTL_FILE}"
      echo "üìù –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: $(du -h ${JTL_FILE})"
      
      RECORDS=$(wc -l < ${JTL_FILE})
      echo "üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: $RECORDS"
    - |
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
      if [ ! -f "utils/jmeter_log_parser.py" ]; then
        echo "‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: utils/jmeter_log_parser.py"
        echo "üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ utils/:"
        ls -la utils/ 2>/dev/null || echo "–ü–∞–ø–∫–∞ utils –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        echo "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"
      else
        echo "‚úÖ –ù–∞–π–¥–µ–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: utils/jmeter_log_parser.py"
        python utils/jmeter_log_parser.py "${JTL_FILE}" --output-dir "${RESULTS_DIR}"
      fi
    
    - echo "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω"
    - echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ ${RESULTS_DIR}/"
  
  artifacts:
    when: on_success
    expire_in: 14 days
    paths:
      - ${RESULTS_DIR}/
